#!/bin/bash

source "${HOME}"/bin/android-x86

export LOCAL_SOURCE_DIR="${SRC_DIR}/${FOLDER_OPENTXS_PROTO_OT}"
export LOCAL_BUILD_DIR="${BUILD_DIR}/${FOLDER_OPENTXS_PROTO_OT}"
export TOOLCHAIN_LIBRARY="libopentxs-proto.so"
export OUTPUT_LIBRARY="libopentxs-proto.so"

export ANDROID_TOOLCHAIN_FILE="${ANDROID_TOOLCHAIN_CMAKE_FILE}"
export NDK_HOME="${ANDROID_NDK_ROOT}"
export TOOLCHAIN_NAME="${ANDROID_EABI_OT}"-"${ANDROID_GCC_VERSION_OT}"
export HOST_SYSTEM_NAME="${BUILDING_ON_MACHINE_TYPE}"

clean_directories "${LOCAL_BUILD_DIR}" "${LOCAL_SOURCE_DIR}" ""

set -e

create_directories "${LOCAL_SOURCE_DIR}" "${LOCAL_BUILD_DIR}" "${FINAL_OUTPUT_DIR_LIB_OT}"

git_clone_source "${OPENTXS_PROTO_VERSION_OT}" "${GIT_OPENTXS_PROTO_URL}" "${LOCAL_SOURCE_DIR}"

sed -i "s/MATCHES Clang/MATCHES DISABLED/" "${LOCAL_SOURCE_DIR}"/CMakeLists.txt

# A hack. We're overwriting the standalone toolchain's protoc
# with the system protoc (so it can run during cross-compile.)
# It will be better to just find anyplace we actually use protoc
# and give it the path there, rather than overwriting the standalone
# toolchain's copy. It may not be so simple however, and we'll figure
# it out later. This works for now.
cp "${PROTOC_LOCATION_BUILD_MACHINE_OT}" "${TOOLCHAIN_USR_OT}/bin/protoc"

cd "${LOCAL_BUILD_DIR}"

export STDLIB_SO_OT="${CXXSTL_LIB}/lib${ANDROID_STL_LIB}.so"

# TODO: teach cmake for android about libc++
cmake \
 -DCXXSTL_LIB="${CXXSTL_LIB}" \
 -DCMAKE_C_COMPILER="${CMAKE_C_COMPILER}" \
 -DCMAKE_CXX_COMPILER="${CMAKE_CXX_COMPILER}" \
 -DCMAKE_CXX_FLAGS="" \
 -DCMAKE_CXX_LINK_FLAGS="-L${CXXSTL_LIB} -l${STDLIB_SO_OT}" \
 -DUSE_CCACHE=no \
 -DANDROID_STL=none \
 -DANDROID_STL_FORCE_FEATURES=OFF \
 -D__libstl="${STDLIB_SO_OT}" \
 -DANDROID_EXCEPTIONS=ON \
 -DANDROID_RTTI=ON \
 -DANDROID_STL_INCLUDE_DIRS="${CXXSTL_INCLUDE}" \
 -DANDROID_STANDALONE_TOOLCHAIN_API_LEVEL="${ANDROID_LEVEL_OT}" \
 -DANDROID_STANDALONE_TOOLCHAIN="${ANDROID_STANDALONE_TOOLCHAIN}" \
 -DCMAKE_TOOLCHAIN_FILE="${ANDROID_TOOLCHAIN_FILE}" \
 -DCMAKE_SYSTEM_PREFIX_PATH="${TOOLCHAIN_SYSROOT_OT}" \
 -DCMAKE_INSTALL_PREFIX="${TOOLCHAIN_USR_OT}" \
 -DJAVA=ON \
 "${LOCAL_SOURCE_DIR}"

cmake \
 -DCXXSTL_LIB="${CXXSTL_LIB}" \
 -DCMAKE_C_COMPILER="${CMAKE_C_COMPILER}" \
 -DCMAKE_CXX_COMPILER="${CMAKE_CXX_COMPILER}" \
 -DCMAKE_CXX_FLAGS="" \
 -DCMAKE_CXX_LINK_FLAGS="-L${CXXSTL_LIB} -l${STDLIB_SO_OT}" \
 -DUSE_CCACHE=no \
 -DANDROID_STL=none \
 -DANDROID_STL_FORCE_FEATURES=OFF \
 -D__libstl="${STDLIB_SO_OT}" \
 -DANDROID_EXCEPTIONS=ON \
 -DANDROID_RTTI=ON \
 -DANDROID_STL_INCLUDE_DIRS="${CXXSTL_INCLUDE}" \
 -DANDROID_STANDALONE_TOOLCHAIN_API_LEVEL="${ANDROID_LEVEL_OT}" \
 -DANDROID_STANDALONE_TOOLCHAIN="${ANDROID_STANDALONE_TOOLCHAIN}" \
 -DCMAKE_TOOLCHAIN_FILE="${ANDROID_TOOLCHAIN_FILE}" \
 -DCMAKE_SYSTEM_PREFIX_PATH="${TOOLCHAIN_SYSROOT_OT}" \
 -DCMAKE_INSTALL_PREFIX="${TOOLCHAIN_USR_OT}" \
 -DJAVA=ON \
 "${LOCAL_SOURCE_DIR}"

make "${OT_MAKE_OPTS}"
make install

mkdir -p "${TOOLCHAIN_SYSROOT_INCLUDE_DIR_OT}"
cp -R "${LOCAL_SOURCE_DIR}"/include/"${FOLDER_OPENTXS_PROTO_OT}" "${TOOLCHAIN_SYSROOT_INCLUDE_DIR_OT}"
cp -R "${LOCAL_BUILD_DIR}"/src/"${FOLDER_OPENTXS_PROTO_OT}"/*.pb.h "${TOOLCHAIN_SYSROOT_INCLUDE_DIR_OT}/${FOLDER_OPENTXS_PROTO_OT}/"

mkdir -p "${FINAL_OUTPUT_DIR_JAVA_OPENTXS_PROTO}"
cp "${TOOLCHAIN_USR_OT}/share/opentxs-proto/java/org/opentransactions/proto"/*.java "${FINAL_OUTPUT_DIR_JAVA_OPENTXS_PROTO}/"

cp "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY}" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY}"
rpl -R -e ".so.9" "_9.so" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY}"
