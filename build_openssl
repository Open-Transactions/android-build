#!/bin/bash
# Copyright (c) 2017 The Open-Transactions developers
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

source "${HOME}"/bin/functions
check_arch "${1}"
source "${HOME}"/bin/android-"${OT_ARCH}"

export LOCAL_SOURCE_DIR="${SRC_DIR}/${FOLDER_OPENSSL_OT}"
export LOCAL_BUILD_DIR="${BUILD_DIR}/${FOLDER_OPENSSL_OT}"
export ARCHIVE_FILE="${SRC_DIR}/openssl.tar.gz"
export BUILD_LIBRARY_CRYPTO="libcrypto.so.1.0.0"
export BUILD_LIBRARY_SSL="libssl.so.1.0.0"
export TOOLCHAIN_LIBRARY_CRYPTO="libcrypto.so"
export TOOLCHAIN_LIBRARY_SSL="libssl.so"
export OUTPUT_LIBRARY_CRYPTO="libcrypto_1_0_0.so"
export OUTPUT_LIBRARY_SSL="libssl_1_0_0.so"

export _ANDROID_NDK="${ANDROID_NDK_OT}"
export _ANDROID_EABI="${ANDROID_EABI_OT}-${ANDROID_GCC_VERSION_OT}"
export _ANDROID_ARCH="${ANDROID_ARCH_OT}"
export _ANDROID_API="${OPENSSL_ANDROID_API_OT}"
export _HOST="${BUILDING_ON_MACHINE_TYPE}"
export ANDROID_TOOLCHAIN="${ANDROID_STANDALONE_TOOLCHAIN}/bin"
export OPENSSLDIR="${LOCAL_BUILD_DIR}"
export OPENSSL_LIBDIR_OT="${OPENSSLDIR}"/lib

case "${_ANDROID_ARCH}" in
	arch-arm)
      ANDROID_TOOLS="arm-linux-androideabi-clang arm-linux-androideabi-ranlib arm-linux-androideabi-ld"
	  ;;
	arch-x86)
      ANDROID_TOOLS="i686-linux-android-clang i686-linux-android-ranlib i686-linux-android-ld"
	  ;;
       arch-x86_64)
      ANDROID_TOOLS="x86_64-linux-android-clang x86_64-linux-android-ranlib x86_64-linux-android-ld"
          ;;
	*)
	  echo "ERROR ERROR ERROR"
	  exit 1
	  ;;
esac

# Most of these should be OK (MACHINE, SYSTEM, ARCH). RELEASE is ignored.
export MACHINE=armv7
export RELEASE=2.6.37
export SYSTEM=android
export ARCH=arm
export CROSS_COMPILE="${ANDROID_EABI_OT}-"

if [ "${_ANDROID_ARCH}" == "arch-x86" ]; then
	export MACHINE=i686
	export RELEASE=2.6.37
	export SYSTEM=android
	export ARCH=x86
	export CROSS_COMPILE="i686-linux-android-"
fi

if ["${_ANDROID_ARCH}" == "arch-x86_64" ]; then
       export MACHINE=x86-64
       export RELEASE=2.6.37
       export SYSTEM=android
       export ARCH=x86_64
       export CROSS_COMPILE="x86_64-linux-android-"
fi

# For the Android toolchain
# https://android.googlesource.com/platform/ndk/+/ics-mr0/docs/STANDALONE-TOOLCHAIN.html
export ANDROID_SYSROOT="${ANDROID_NDK_ROOT}/platforms/${_ANDROID_API}/${_ANDROID_ARCH}"
export SYSROOT="${ANDROID_SYSROOT}"
export NDK_SYSROOT="${ANDROID_SYSROOT}"
export ANDROID_NDK_SYSROOT="${ANDROID_SYSROOT}"
export ANDROID_API="${_ANDROID_API}"
export ANDROID_DEV="${ANDROID_NDK_ROOT}/platforms/${_ANDROID_API}/${_ANDROID_ARCH}/usr"
export HOSTCC=clang

VERBOSE=1
if [ ! -z "$VERBOSE" ] && [ "$VERBOSE" != "0" ]; then
  echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
  echo "ANDROID_ARCH: $_ANDROID_ARCH"
  echo "ANDROID_EABI: $_ANDROID_EABI"
  echo "ANDROID_API: $ANDROID_API"
  echo "ANDROID_SYSROOT: $ANDROID_SYSROOT"
  echo "ANDROID_TOOLCHAIN: $ANDROID_TOOLCHAIN"
  echo "FIPS_SIG: $FIPS_SIG"
  echo "CROSS_COMPILE: $CROSS_COMPILE"
  echo "ANDROID_DEV: $ANDROID_DEV"
fi

################################################################################################################################################################################################################################################################################
clean_directories "${LOCAL_BUILD_DIR}" "${LOCAL_SOURCE_DIR}" "${ARCHIVE_FILE}"

set -e

create_directories "${LOCAL_SOURCE_DIR}" "${LOCAL_BUILD_DIR}" "${FINAL_OUTPUT_DIR_LIB_OT}"

wget_source "${ARCHIVE_FILE}" "${WGET_OPENSSL_URL}" "${LOCAL_SOURCE_DIR}"

sed -i "s/-mandroid //" "${LOCAL_SOURCE_DIR}"/Configure

mkdir -p "${OPENSSL_LIBDIR_OT}"
cd "${LOCAL_SOURCE_DIR}"
./config shared -no-asm -no-ssl3 -no-comp -no-hw -no-engine --openssldir="${OPENSSLDIR}"
make depend
make "${OT_MAKE_OPTS}" CC="${CC}" CFLAG="${CFLAGS_OT}" RANLIB="${ANDROID_TOOLCHAIN}"/"${ANDROID_EABI_OT}"-ranlib all
make CC="${CC}" CFLAG="${CFLAGS_OT}" RANLIB="${ANDROID_TOOLCHAIN}"/"${ANDROID_EABI_OT}"-ranlib install

if [ -e "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_CRYPTO}" ] ; then
	rm -rf "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_CRYPTO}"
fi

if [ -e "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_SSL}" ] ; then
	rm -rf "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_SSL}"
fi

if [ -e "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_CRYPTO}" ] ; then
	rm -rf "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_CRYPTO}"
fi

if [ -e "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_SSL}" ] ; then
	rm -rf "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_SSL}"
fi

cp -R "${LOCAL_BUILD_DIR}"/include/"${FOLDER_OPENSSL_OT}" "${TOOLCHAIN_SYSROOT_INCLUDE_DIR_OT}"
cp "${OPENSSL_LIBDIR_OT}"/"${BUILD_LIBRARY_CRYPTO}" "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_CRYPTO}"
cp "${OPENSSL_LIBDIR_OT}"/"${BUILD_LIBRARY_SSL}" "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_SSL}"
cp "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_CRYPTO}" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_CRYPTO}"
cp "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_SSL}" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_SSL}"
rpl -R -e ".so.1.0.0" "_1_0_0.so" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_CRYPTO}"
rpl -R -e ".so.1.0.0" "_1_0_0.so" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_SSL}"
