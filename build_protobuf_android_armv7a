#!/bin/bash

source "${HOME}"/bin/functions
source "${HOME}"/bin/android-armv7a

export LOCAL_SOURCE_DIR="${SRC_DIR}/${FOLDER_PROTOBUF_OT}"
export LOCAL_BUILD_DIR="${BUILD_DIR}/${FOLDER_PROTOBUF_OT}"
export ARCHIVE_FILE="${SRC_DIR}/protobuf.tar.gz"
export TOOLCHAIN_LIBRARY="libprotobuf-lite.so.9.0.1"
export OUTPUT_LIBRARY="libprotobuf-lite_9.so"

clean_directories "${LOCAL_BUILD_DIR}" "${LOCAL_SOURCE_DIR}" "${ARCHIVE_FILE}"

set -e

create_directories "${LOCAL_SOURCE_DIR}" "${LOCAL_BUILD_DIR}" "${FINAL_OUTPUT_DIR_LIB_OT}"

wget_source "${ARCHIVE_FILE}" "${WGET_PROTOBUF_URL}" "${LOCAL_SOURCE_DIR}"

cd "${LOCAL_BUILD_DIR}"

"${LOCAL_SOURCE_DIR}"/configure \
 --prefix="${TOOLCHAIN_USR_OT}" \
 --host="${ANDROID_EABI_OT}" \
 --with-sysroot="${SYSROOT}" \
 --disable-static \
 --enable-shared \
 --enable-cross-compile \
 --with-pthreads \
 --with-protoc=protoc \
  CPPFLAGS="-I${CXXSTL_INCLUDE} -I${OUTPUT_DIR}/include" \
  CFLAGS="${CFLAGS_OT}" \
  CXXFLAGS="${CXXFLAGS_OT}" \
  LDFLAGS="${LDFLAGS_OT} -L${CXXSTL_LIB} -L${OUTPUT_DIR}/lib" \
  LIBS="-l${ANDROID_STL_LIB}"

make "${OT_MAKE_OPTS}"
make install
cp "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY}" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY}"
rpl -R -e ".so.9" "_9.so" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY}"

# A hack. We're overwriting the standalone toolchain's protoc
# with the system protoc (so it can run during cross-compile.)
# It will be better to just find anyplace we actually use protoc
# and give it the path there, rather than overwriting the standalone
# toolchain's copy. It may not be so simple however, and we'll figure
# it out later. This works for now.
cp "${PROTOC_LOCATION_BUILD_MACHINE_OT}" "${TOOLCHAIN_USR_OT}/bin/protoc"
