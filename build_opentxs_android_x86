#!/bin/bash

source "${HOME}"/bin/android-x86

export LOCAL_SOURCE_DIR="${SRC_DIR}/${FOLDER_OPENTXS_OT}"
export LOCAL_BUILD_DIR="${BUILD_DIR}/${FOLDER_OPENTXS_OT}"
export TOOLCHAIN_LIBRARY_MAIN="libopentxs.so"
export TOOLCHAIN_LIBRARY_SWIG="libJOpentxs.so"
export OUTPUT_LIBRARY_MAIN="libopentxs.so"
export OUTPUT_LIBRARY_SWIG="libJOpentxs.so"

export ANDROID_TOOLCHAIN_FILE="${ANDROID_TOOLCHAIN_CMAKE_FILE}"
export NDK_HOME="${ANDROID_NDK_ROOT}"
export TOOLCHAIN_NAME="${ANDROID_EABI_OT}"-"${ANDROID_GCC_VERSION_OT}"
export HOST_SYSTEM_NAME="${BUILDING_ON_MACHINE_TYPE}"

clean_directories "${LOCAL_BUILD_DIR}" "${LOCAL_SOURCE_DIR}" ""

set -e

create_directories "${LOCAL_SOURCE_DIR}" "${LOCAL_BUILD_DIR}" "${FINAL_OUTPUT_DIR_LIB_OT}"

git_clone_source "${OPENTXS_VERSION_OT}" "${GIT_OPENTXS_URL}" "${LOCAL_SOURCE_DIR}"

sed -i "s/MATCHES Clang/MATCHES DISABLED/" "${LOCAL_SOURCE_DIR}"/CMakeLists.txt
sed -i "s/-Wno-useless-cast/-Wuseless-cast/" "${LOCAL_SOURCE_DIR}"/CMakeLists.txt
sed -i "s/-Wunused-macros/-Wunused-macros/" "${LOCAL_SOURCE_DIR}"/CMakeLists.txt
sed -i "s/-Wabsolute-value/-Wno-absolute-value/" "${LOCAL_SOURCE_DIR}"/CMakeLists.txt
sed -i "s/-Werror//" "${LOCAL_SOURCE_DIR}"/CMakeLists.txt
if [ ${ABI} == "x86" ]
    then
        sed -i "s/-std=c++1z/-std=c++14/" "${LOCAL_SOURCE_DIR}"/CMakeLists.txt
fi
sed -i "s~#include \"opentxs/core/util/android_string.hpp\"~~" "${LOCAL_SOURCE_DIR}"/include/opentxs/stdafx.hpp
sed -i "s~#include \"opentxs/core/util/android_string.hpp\"~~" "${LOCAL_SOURCE_DIR}"/include/opentxs/client/commands/CmdBase.hpp
if [ ${ABI} == "x86_64" ]
    then 
        sed -i "s/timegm64/timegm/" "${LOCAL_SOURCE_DIR}"/src/core/util/StringUtils.cpp
        sed -i "s/time64.h/time.h/" "${LOCAL_SOURCE_DIR}"/src/core/util/StringUtils.cpp
fi
sed -i "s~using ::signbit;~//using ::signbit;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::fpclassify;~//using ::fpclassify;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isfinite;~//using ::isfinite;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isinf;~//using ::isinf;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isnan;~//using ::isnan;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isnormal;~//using ::isnormal;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isgreater;~//using ::isgreater;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isgreaterequal;~//using ::isgreaterequal;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isless;~//using ::isless;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::islessequal;~//using ::islessequal;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::islessgreater;~//using ::islessgreater;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isunordered;~//using ::isunordered;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath
sed -i "s~using ::isunordered;~//using ::isunordered;~" "${ANDROID_STANDALONE_TOOLCHAIN}"/include/c++/4.9.x/cmath

# A hack. We're overwriting the standalone toolchain's protoc
# with the system protoc (so it can run during cross-compile.)
# It will be better to just find anyplace we actually use protoc
# and give it the path there, rather than overwriting the standalone
# toolchain's copy. It may not be so simple however, and we'll figure
# it out later. This works for now.
cp "${PROTOC_LOCATION_BUILD_MACHINE_OT}" "${TOOLCHAIN_USR_OT}/bin/protoc"

cd "${LOCAL_BUILD_DIR}"

export STDLIB_SO_OT="${CXXSTL_LIB}/lib${ANDROID_STL_LIB}.so"

# TODO: teach cmake for android about libc++
cmake \
 -DCXXSTL_LIB="${CXXSTL_LIB}" \
 -DCMAKE_C_COMPILER="${CMAKE_C_COMPILER}" \
 -DCMAKE_CXX_COMPILER="${CMAKE_CXX_COMPILER}" \
 -DCMAKE_CXX_FLAGS="${CXXFLAGS_OT}" \
 -DCMAKE_CXX_LINK_FLAGS="-L${CXXSTL_LIB} -l${STDLIB_SO_OT}" \
 -DUSE_CCACHE=no \
 -DANDROID_STL=none \
 -DANDROID_STL_FORCE_FEATURES=OFF \
 -D__libstl="${STDLIB_SO_OT}" \
 -DANDROID_EXCEPTIONS=ON \
 -DANDROID_RTTI=ON \
 -DANDROID_STL_INCLUDE_DIRS="${CXXSTL_INCLUDE}" \
 -DANDROID_STANDALONE_TOOLCHAIN_API_LEVEL="${ANDROID_LEVEL_OT}" \
 -DANDROID_STANDALONE_TOOLCHAIN="${ANDROID_STANDALONE_TOOLCHAIN}" \
 -DCMAKE_TOOLCHAIN_FILE="${ANDROID_TOOLCHAIN_FILE}" \
 -DCMAKE_SYSTEM_PREFIX_PATH="${TOOLCHAIN_SYSROOT_OT}" \
 -DCMAKE_INSTALL_PREFIX="${TOOLCHAIN_USR_OT}" \
 -DJAVA=ON \
 "${LOCAL_SOURCE_DIR}"

cmake \
 -DCXXSTL_LIB="${CXXSTL_LIB}" \
 -DCMAKE_C_COMPILER="${CMAKE_C_COMPILER}" \
 -DCMAKE_CXX_COMPILER="${CMAKE_CXX_COMPILER}" \
 -DCMAKE_CXX_FLAGS="${CXXFLAGS_OT}" \
 -DCMAKE_CXX_LINK_FLAGS="-L${CXXSTL_LIB} -l${STDLIB_SO_OT}" \
 -DUSE_CCACHE=no \
 -DANDROID_STL=none \
 -DANDROID_STL_FORCE_FEATURES=OFF \
 -D__libstl="${STDLIB_SO_OT}" \
 -DANDROID_EXCEPTIONS=ON \
 -DANDROID_RTTI=ON \
 -DANDROID_STL_INCLUDE_DIRS="${CXXSTL_INCLUDE}" \
 -DANDROID_STANDALONE_TOOLCHAIN_API_LEVEL="${ANDROID_LEVEL_OT}" \
 -DANDROID_STANDALONE_TOOLCHAIN="${ANDROID_STANDALONE_TOOLCHAIN}" \
 -DCMAKE_TOOLCHAIN_FILE="${ANDROID_TOOLCHAIN_FILE}" \
 -DCMAKE_SYSTEM_PREFIX_PATH="${TOOLCHAIN_SYSROOT_OT}" \
 -DCMAKE_INSTALL_PREFIX="${TOOLCHAIN_USR_OT}" \
 -DJAVA=ON \
 "${LOCAL_SOURCE_DIR}"

sed -i "s/soname, /soname,libJOpentxs.so /" "${LOCAL_BUILD_DIR}"/wrappers/java/CMakeFiles/JOpentxs.dir/link.txt

make CXXFLAGS="${CXXFLAGS_OT}" "${OT_MAKE_OPTS_FOR_BUGGY_COMPILERS}" -j1
make LDFLAGS="${LDFLAGS_OT}" install

mkdir -p "${FINAL_OUTPUT_DIR_JAVA_OPENTXS_OT}"
cp "${LOCAL_BUILD_DIR}/wrappers/java/otx_java"/*.java "${FINAL_OUTPUT_DIR_JAVA_OPENTXS_OT}/"

cp "${STDLIB_SO_OT}" "${FINAL_OUTPUT_DIR_LIB_OT}"
cp "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_MAIN}" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_MAIN}"
cp "${TOOLCHAIN_SYSROOT_LIB_DIR_OT}/${TOOLCHAIN_LIBRARY_SWIG}" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_SWIG}"
rpl -R -e ".so.9" "_9.so" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_MAIN}"
rpl -R -e ".so.1.0.0" "_1_0_0.so" "${FINAL_OUTPUT_DIR_LIB_OT}/${OUTPUT_LIBRARY_MAIN}"
